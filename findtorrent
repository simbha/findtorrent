#!/usr/bin/env python2
# This program is free software. It comes without any warranty, to
# the extent permitted by applicable law. You can redistribute it
# and/or modify it under the terms of the Do What The Fuck You Want
# To Public License, Version 2, as published by Sam Hocevar. See
# http://sam.zoy.org/wtfpl/COPYING for more details.

import os
import sys
import argparse
import urllib
import urllib2
import gzip
import string
from configobj import ConfigObj
from StringIO import StringIO
from operator import itemgetter
from hurry.filesize import size, si

plugin_dir = sys.path[0] + "/plugins"
sys.path.append(plugin_dir)


def str2bool(v):
    return v.lower() in ("yes", "true")


def load_config():
    config_file = os.environ["XDG_CONFIG_HOME"]\
        + "/findtorrent/findtorrent.conf"
    try:
        conf = ConfigObj(config_file, file_error=True)
    except IOError:
        if not os.path.exists(config_file.replace("/findtorrent.conf", "")):
            os.makedirs(config_file.replace("/findtorrent.conf", ""))
        conf = ConfigObj()
        conf.filename = config_file
        conf["download_dir"] = os.environ["HOME"]
        conf["default_plugin"] = "isohunt"
        conf.write()

    return conf


def get_args():
    parser = argparse.ArgumentParser(description='Find and download torrent \
                                                  files from various torrent \
                                                  sites')
    parser.add_argument('--plugin',
                        metavar='plugin',
                        default=conf['default_plugin'],
                        help='plugin')
    parser.add_argument('--max-items',
                        metavar='max_items',
                        default=-1,
                        help='maximum number of results')
    parser.add_argument('--sort',
                        metavar='sort',
                        default='seed',
                        help='sort results')
    parser.add_argument('--reverse',
                        metavar='reverse',
                        default='True',
                        help='reverse results order')
    parser.add_argument('keywords',
                        metavar='keywords',
                        nargs='?',
                        default='',
                        type=str,
                        help='search')
    args = vars(parser.parse_args())

    plugin = args['plugin']
    max_items = int(args['max_items'])
    sort = args['sort']
    reverse = str2bool(args['reverse'])

    if (args['keywords'] == ''):
        keywords = get_user_input('Enter search terms:')
    else:
        keywords = args['keywords']

    return plugin, max_items, sort, reverse, keywords


def get_user_input(message):
    try:
        user_input = raw_input(message + ' ')
    except KeyboardInterrupt:
        print ''
        sys.exit()
    return user_input


class colors:
    INDEX = '\033[90m'
    NAME = '\033[94m'
    SIZE = '\033[92m'
    FILES = '\033[93m'
    SEED = '\033[91m'
    LEECH = '\033[95m'
    HEADER = '\033[90m'
    ENDC = '\033[0m'

    def disable(self):
        self.INDEX = ''
        self.NAME = ''
        self.SIZE = ''
        self.FILES = ''
        self.SEED = ''
        self.LEECH = ''
        self.HEADER = ''
        self.ENDC = ''


class Items:
    def print_items(self, list, sort, reverse, max_items):
        cols = int(os.popen('stty size', 'r').read().split()[1])
        Items.sorted = sorted(list, key=itemgetter(sort), reverse=reverse)
        print colors.HEADER + \
              'No.  Name' + (cols - 33) * ' ' + 'Size  Files  Seed  Leech'
        print cols * '-'
        for index, item in enumerate(Items.sorted):
            if (max_items != -1 and index + 1 > max_items):
                break
            print colors.INDEX + string.ljust(str(index + 1) + '.', 5) + \
                  colors.NAME + string.ljust(item['name'][:cols - 31],
                                             cols - 31) + \
                  colors.SIZE + string.rjust(size(item['size'],
                                                  system=si), 6) + \
                  colors.FILES + string.rjust(str(item['files']) \
                                 .replace('-1', 'N/A'), 7) + \
                  colors.SEED + string.rjust(str(item['seed']) \
                                .replace('-1', 'N/A'), 6) + \
                  colors.LEECH + string.rjust(str(item['leech']) \
                                 .replace('-1', 'N/A'), 7) + \
                  colors.ENDC

    def get_url_list(self):
        Items.urls = []
        url_nums = get_user_input('Enter torrent number:').split(',')
        for url_num in url_nums:
            Items.urls.append(Items.sorted[int(url_num) - 1]['url'])

    def download_urls(self):
        for url in Items.urls:
            download_file(url, conf["download_dir"] + "/" + url.split('/')[-1])


def download_file(url, file):
    request = urllib2.Request(url)
    request.add_header('Accept-encoding', 'gzip')
    response = urllib2.urlopen(request)
    if response.info().get('Content-Encoding') == 'gzip':
        buf = StringIO(response.read())
        f = gzip.GzipFile(fileobj=buf)
        file = open(file, "wb")
        file.write(f.read())
        file.close
    else:
        urllib.urlretrieve(url, file)


if __name__ == "__main__":
    conf = load_config()
    plugin, max_items, sort, reverse, keywords = get_args()

    exec 'import %s' % plugin

    exec 'item_list = %s.search(keywords)' % plugin
    i = Items()
    i.print_items(item_list, sort, reverse, max_items)
    i.get_url_list()
    i.download_urls()
