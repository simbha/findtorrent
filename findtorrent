#!/usr/bin/env python2

import os
import sys
import getopt
import urllib
import urllib2
import gzip
import string
from configobj import ConfigObj
from StringIO import StringIO

plugin_dir = sys.path[0] + "/plugins"
sys.path.append(plugin_dir)
import kat
import tpb
import isohunt


def usage():
    print "Usage: findtorrent [keywords]"


def load_config():
    config_file = os.environ["XDG_CONFIG_HOME"] + \
                  "/findtorrent/findtorrent.conf"
    try:
        conf = ConfigObj(config_file, file_error=True)
    except IOError:
        if not os.path.exists(config_file.replace("/findtorrent.conf", "")):
            os.makedirs(config_file.replace("/findtorrent.conf", ""))
        conf = ConfigObj()
        conf.filename = config_file
        conf["download_dir"] = os.environ["HOME"]
        conf.write()
    return conf


class colors:
    INDEX = '\033[90m'
    NAME = '\033[94m'
    SIZE = '\033[92m'
    FILES = '\033[93m'
    AGE = '\033[91m'
    SEED = '\033[91m'
    LEECH = '\033[95m'
    HEADER = '\033[90m'
    ENDC = '\033[0m'

    def disable(self):
        self.INDEX = ''
        self.NAME = ''
        self.SIZE = ''
        self.FILES = ''
        self.AGE = ''
        self.SEED = ''
        self.LEECH = ''
        self.HEADER = ''
        self.ENDC = ''


def paint_items(query):
    torrents, index = isohunt.search(query)
    rows, columns = os.popen('stty size', 'r').read().split()
    left = "#   Name"
    right = "Size       Files  Seed  Leech"
    print colors.HEADER + \
          left + \
          (int(columns) - len(left) - len(right)) * " " + \
          right + \
          colors.ENDC
    print int(columns) * "-"
    i = 1
    while (i < index):
        left = string.ljust(str(i) + ".", 4) + torrents[i]["name"]
        right = string.ljust(torrents[i]["size"], 11) + \
                string.ljust(torrents[i]["files"], 7) + \
                string.ljust(torrents[i]["seed"], 6) + \
                string.ljust(torrents[i]["leech"], 5)
        print colors.INDEX + string.ljust(str(i) + ".", 4) + \
              colors.NAME + torrents[i]["name"] + \
              (int(columns) - len(left) - len(right)) * " " + \
              colors.SIZE + string.ljust(torrents[i]["size"], 11) + \
              colors.FILES + string.ljust(torrents[i]["files"], 7) + \
              colors.SEED + string.ljust(torrents[i]["seed"], 6) + \
              colors.LEECH + string.ljust(torrents[i]["leech"], 5) + \
              colors.ENDC
        i += 1
    return torrents


def download_file(url, file):
    request = urllib2.Request(url)
    request.add_header('Accept-encoding', 'gzip')
    response = urllib2.urlopen(request)
    if response.info().get('Content-Encoding') == 'gzip':
        buf = StringIO(response.read())
        f = gzip.GzipFile(fileobj=buf)
        file = open(file, "wb")
        file.write(f.read())
        file.close
    else:
        urllib.urlretrieve(url, file)


if __name__ == "__main__":
    conf = load_config()

    if (len(sys.argv) > 1):
        try:
            opts, args = getopt.getopt(sys.argv[1:], "h", ["help"])
        except getopt.GetoptError, err:
            print str(err)
            usage()
            sys.exit()
        for o, a in opts:
            if o in ("-h", "--help"):
                usage()
                sys.exit()
        torrents = paint_items(sys.argv[1])
    else:
        try:
            torrents = paint_items(raw_input("Enter search terms: "))
        except KeyboardInterrupt:
            print ""
            sys.exit()

    try:
        for url_index in string.split(raw_input("\nEnter torrent number: "), ","):
            url = torrents[int(url_index)]["url"]
            download_file(url, conf["download_dir"] + "/" + url.split('/')[-1])
    except KeyboardInterrupt:
        print ""
        sys.exit()
